# -*- coding: utf-8 -*-
"""Desafio - Visualiza√ß√£o de Dados Streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QQqYCZZYnxBIPuRpsb2ERNXFgOxRDwlQ

## **Desafio - Visualiza√ß√£o de Dados Streamlit**

**Aluno:** Romulo Galdino.
"""

# Importa√ß√£o de bibliotecas
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# --- Cabe√ßalho da P√°gina ---
st.title("üìà An√°lise de Crescimento de Vendas - 1¬∫ Trimestre 2024")
st.markdown("""
Este painel apresenta uma an√°lise do crescimento de vendas da empresa no in√≠cio de 2024,
com gr√°ficos e insights focados no desempenho di√°rio, mensal e por categoria de produto.
""")

# --- Carregar o Dataset ---
st.header("1. Carregando os Dados")
df = pd.read_csv('/content/sample_data/sales_data.csv')  # ajuste o caminho se necess√°rio
df.drop_duplicates(inplace=True)
df['Date_Sold'] = pd.to_datetime(df['Date_Sold'])

st.write("Primeiras linhas do dataset:")
st.dataframe(df.head())

# --- Informa√ß√µes Iniciais ---
st.header("2. Informa√ß√µes do Dataset")
total_registros = len(df)
data_inicial = df['Date_Sold'].min()
data_final = df['Date_Sold'].max()

st.success(f"Total de registros: **{total_registros}**")
st.success(f"Per√≠odo coberto: **{data_inicial.date()} at√© {data_final.date()}**")

# --- Evolu√ß√£o de Vendas Di√°rias ---
st.header("3. Evolu√ß√£o das Vendas Di√°rias")

vendas_diarias = df.groupby('Date_Sold')['Total_Sales'].sum()

fig, ax = plt.subplots(figsize=(10,5))
sns.lineplot(x=vendas_diarias.index, y=vendas_diarias.values, color='orange', linewidth=2.5, ax=ax)
ax.set_title('Vendas Totais Di√°rias (Jan - in√≠cio de Abr/2024)')
ax.set_xlabel('Data')
ax.set_ylabel('Vendas Di√°rias (R$)')
plt.xticks(rotation=45)
ax.grid(axis='y', linestyle='--', alpha=0.7)
st.pyplot(fig)

# --- Compara√ß√£o de Vendas Mensais ---
st.header("4. Compara√ß√£o de Vendas Mensais (Jan, Fev, Mar)")

df['Month'] = df['Date_Sold'].dt.to_period('M')
vendas_mensais = df[df['Date_Sold'] < '2024-04-01'].groupby('Month')['Total_Sales'].sum()

meses = ['Jan 2024', 'Fev 2024', 'Mar 2024']
totais = [vendas_mensais.loc['2024-01'], vendas_mensais.loc['2024-02'], vendas_mensais.loc['2024-03']]

fig2, ax2 = plt.subplots(figsize=(8,5))
barras = ax2.bar(meses, totais, color='#4c78a8')
ax2.set_title('Vendas Totais Mensais - 1¬∫ Trimestre 2024')
ax2.set_xlabel('M√™s')
ax2.set_ylabel('Vendas Totais (R$)')
ax2.grid(axis='y', linestyle='--', alpha=0.7)

for barra in barras:
    altura = barra.get_height()
    ax2.annotate(f'R$ {altura:,.0f}',
                 xy=(barra.get_x() + barra.get_width()/2, altura), xytext=(0,5),
                 textcoords="offset points", ha='center', va='bottom')

st.pyplot(fig2)

# --- An√°lise de Vendas por Categoria ---
st.header("5. An√°lise de Vendas por Categoria")

vendas_cat_mensal = df[df['Date_Sold'] < '2024-04-01'].groupby(['Month','Category'])['Total_Sales'].sum().unstack(fill_value=0)

colors = ['#4c78a8', '#f58518', '#54a24b', '#b279a2']
fig3, ax3 = plt.subplots(figsize=(8,5))
vendas_cat_mensal.plot(kind='bar', stacked=True, color=colors, ax=ax3)

ax3.set_title('Vendas Mensais por Categoria - 1¬∫ Tri 2024')
ax3.set_xlabel('M√™s')
ax3.set_ylabel('Vendas Totais (R$)')
ax3.grid(axis='y', linestyle='--', alpha=0.7)
ax3.legend(title='Categoria', bbox_to_anchor=(1.05, 1), loc='upper left')

st.pyplot(fig3)

# --- Conclus√£o ---
st.header("6. Conclus√£o üìå")
st.markdown("""As vendas aumentaram m√™s a m√™s, com destaque para **mar√ßo de 2024**, que superou todos os meses anteriores.
- **Clothing** e **Grocery** foram as categorias que mais impulsionaram o crescimento no trimestre.
- **Toys** teve crescimento s√≥lido, enquanto **Electronics** caiu um pouco em mar√ßo, indicando necessidade de monitoramento.
""")